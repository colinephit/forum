<!DOCTYPE html>
<html>

<%- include("head", {title: 'My Questions' }) %>

  <body>
    <div id="outer">
      <%- include('navbar', {user: user}) %>
        <main id="content">
          <section id="primaryContentContainer">
            <article id="primaryContent">
              <div class="filters">
                <form id="filter-form" class="mb-3">
                  <div class="input-group mb-3">
                    <input type="text" name="query" id="query" class="form-control"
                      placeholder="Search for your questions..." />
                    <button type="submit" class="btn btn-outline-dark">Search</button>
                  </div>

                  <div class="row">
                    <div class="col-md-6">
                      <label for="sort">Sort Questions</label>
                      <select name="sort" id="sort" class="form-select">
                        <option value="recent">Sort by Most Recent</option>
                        <option value="unanswered">Show Unanswered</option>
                      </select>
                    </div>

                    <div class="col-md-6">
                      <label for="tagFilter">Filter by Tag(s)</label>
                      <input type="text" class="form-control" name="tag" id="tagFilter"
                        placeholder="Enter tag(s) separated by commas" />
                    </div>
                  </div>
                </form>
                <br />
              </div>
              <div id="questions-container"></div>

            </article>
          </section>
          <%- include('sidebar'); %>
        </main>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
      // Function to handle voting
      async function vote(questionId, voteType) {
        try {
          const token = localStorage.getItem("accesstoken")
          const response = await fetch(`/api/questions/vote/${questionId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
            body: JSON.stringify({ voteType }),
          });

          if (response.status === 401) {
            window.location.href = "/users/login"; // Redirect to login page
            return;
          }

          if (response.ok) {
            fetchQuestions(); // Reload questions to update vote count
          } else {
            console.error("Voting failed");
          }
        } catch (error) {
          console.error("Error:", error);
        }
      }

      async function fetchQuestions() {
        const token = localStorage.getItem("accesstoken");

        // Decode the token to get userId
        const decodedToken = parseJwt(token);
        const userId = decodedToken.userId; // Now this is assigned first

        try {
          const response = await fetch(`/api/questions/user/${userId}`, {
            method: "GET",
            headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
          });
          const questions = await response.json();

          displayQuestions(questions, userId); // Now the userId is available here
        } catch (error) {
          console.error("Error fetching questions:", error);
        }
      }

      // Function to display the questions
      function displayQuestions(questions, userId) {
        if (questions.length === 0) {
          $("#questions-container").html("<h2>You have not asked any questions yet.</h2>");
          return;
        }

        let html = "<h2>My Questions</h2>";
        questions.forEach((question) => {
          const hasUpvoted = question.votes?.some(vote => vote.userId === userId && vote.type === "upvote");
          const hasDownvoted = question.votes?.some(vote => vote.userId === userId && vote.type === "downvote");
          html += `
          <div class="card mb-3" style="max-width: 740px">
            <div class="row g-0">
              <div class="col-md-2 d-flex flex-column align-items-center justify-content-center bg-light vote-section">
                <button class="btn ${hasUpvoted ? "btn-danger" : "btn-outline-danger"} btn-sm" 
                        style="width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; padding: 0;" 
                        onclick="vote('${question._id}', 'upvote')">
                   <i class="bi bi-caret-up-fill fs-4"></i>
                </button>
                <span class="fw-bold mt-1 mb-1">${question.votecount}</span>
                <button class="btn ${hasDownvoted ? "btn-secondary" : "btn-outline-secondary"} btn-sm" 
                        style="width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; padding: 0;" 
                        onclick="vote('${question._id}', 'downvote')">
                  <i class="bi bi-caret-down-fill fs-4"></i>
                </button>
              </div>
              <div class="col-md-10">
                <div class="card-body">
                  <h5 class="card-title">
                    <a href="/questions/${question._id}">${question.title}</a>
                  </h5>
                  <p>${question.body}</p>
                  <div class="question-details">
                    <img width="50px" height="50px" src="${question.userDetails?.profilePicture
              ? 'data:image/png;base64,' + question.userDetails.profilePicture
              : '/images/default.jpg'
            }" class="question-img" />
                    <div class="text-details">
                      <p style="line-height: 1.1">
                        <small class="text-body-secondary">
                          Posted by <a href="/users/${question.userDetails?._id}/profile">
                            <strong>${question.userDetails?.displayname || "Unknown"}</strong>
                          </a> <br />
                          on <strong>${question.formattedCreated || "Unknown Date"}</strong>
                        </small>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        });

        $("#questions-container").html(html);
      }

      // Initialize by calling fetchQuestions
      $(document).ready(function () {
        fetchQuestions(); // Call fetchQuestions when the document is ready
      });

      function parseJwt(token) {
        return JSON.parse(atob(token.split(".")[1]));
      }
    </script>

  </body>
  <script>
    function confirmDelete(event) {
      if (!confirm("Are you sure you want to delete this question? This action cannot be undone.")) {
        event.preventDefault(); // Stop the form submission
        return false;
      }
      return true; // Allow form submission if confirmed
    }
  </script>

</html>